name: Combine and Auto-Merge Dependabot PRs

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 6'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependabot-prs:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.check_prs.outputs.result }}
    steps:
      - name: Check if Dependabot PRs exist
        id: check_prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            const dependabotPRs = prs.filter(pr =>
              pr.user.login === "dependabot[bot]" || pr.head.ref.startsWith("dependabot/")
            );
            core.info(`Found ${dependabotPRs.length} Dependabot PR(s).`);
            return dependabotPRs.length > 0 ? "true" : "false";
          result-encoding: string
          
  combine-dependabot-prs:
    needs: check-dependabot-prs
    if: needs.check-dependabot-prs.outputs.found == 'true'
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr_info.outputs.pr_number }}
      failed_dependencies: ${{ steps.extract_failed.outputs.failed_dependencies }}
    concurrency:
      group: "dependabot-combine-${{ github.ref }}"
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clean combined branch if exists
        run: |
          git fetch origin dependabot-combined-prs || true
          git push origin --delete dependabot-combined-prs || true

      - name: Combine Dependabot PRs and capture logs
        id: combine
        continue-on-error: true
        shell: bash
        run: |
          # Ejecutamos la acción de combinación y redirigimos la salida a un archivo de log.
          # Nota: Se asume que la acción se puede ejecutar mediante npx o invocando su entrypoint.
          # En este ejemplo se utiliza "npx" para simularlo; en tu entorno adapta la llamada según lo necesario.
          npx mAAdhaTTah/combine-dependabot-prs@main \
            --branchPrefix="dependabot" \
            --mustBeGreen="true" \
            --combineBranchName="dependabot-combined-prs" \
            --baseBranch="master" \
            --openPR="true" \
            --allowSkipped="true" \
            --ignoreLabel="nocombine" \
            --githubToken="${{ secrets.GITHUB_TOKEN }}" 2>&1 | tee combine.log

      - name: Extract failed dependencies
        id: extract_failed
        shell: bash
        run: |
          # Buscar en el log las líneas que indiquen fallo al aplicar una actualización.
          # Se espera que aparezcan líneas con el formato:
          #   Failed to apply "Bump <dependency> from <old_version> to <new_version>
          failed_deps=$(grep 'Failed to apply "Bump' combine.log | sed -n 's/Failed to apply "Bump \([^"]*\).*/\1/p' | sort | uniq | paste -sd ',' -)
          echo "failed_dependencies=$failed_deps" >> "$GITHUB_OUTPUT"
        # Deja en blanco si no se encuentra nada, es decir, todas se aplicaron correctamente.

      - name: Get Combined PR number
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            # Espera 2 segundos para que la PR recién creada se indexe
            await new Promise(resolve => setTimeout(resolve, 2000));
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: `${context.repo.owner}:dependabot-combined-prs`
            });
            if (prs.length === 0) {
              core.info("No combined PR found.");
              return;
            }
            core.setOutput("pr_number", prs[0].number);
          result-encoding: string

  automerge-dependabot-prs:
    needs: combine-dependabot-prs
    if: needs.combine-dependabot-prs.outputs.pr_number != ''
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve with Bot Token
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.BOT_PAT }}
          pull-request-number: ${{ needs.combine-dependabot-prs.outputs.pr_number }}

      - name: Merge Combined PR (solo si autor es github-actions o dependabot)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const prNumber = parseInt('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            const author = pr.user.login;
            core.info(`El autor del PR #${prNumber} es ${author}`);
            if (author === 'github-actions[bot]' || author === 'dependabot[bot]') {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
              });
              core.info(`✅ PR #${prNumber} fusionado correctamente.`);
            } else {
              core.info(`⏭ PR #${prNumber} no fusionado (autor: ${author})`);
            }

      - name: Delete combined branch if merged
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = Number('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            if (pr.merged) {
              core.info("PR has been merged. Deleting combined branch...");
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/dependabot-combined-prs'
              });
            } else {
              core.info("PR not merged. Keeping combined branch.");
            }

      - name: Close original Dependabot PRs based on applied dependencies
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            // Obtenemos el listado de dependencias que fallaron (no aplicadas)
            const failedDepsStr = "${{ needs.combine-dependabot-prs.outputs.failed_dependencies }}";
            const failedDeps = failedDepsStr.split(',').map(d => d.trim()).filter(Boolean);
            core.info(`Failed dependencies (not applied): ${failedDeps.join(', ')}`);
            
            // Obtenemos todas las PRs abiertas originales de Dependabot (excluyendo la rama combinada)
            const { data: allPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            const originalPRs = allPRs.filter(pr =>
              pr.user.login === "dependabot[bot]" &&
              pr.head.ref !== "dependabot-combined-prs"
            );
            for (const pr of originalPRs) {
              let dependencyName = "";
              // Suponemos que el título de la PR sigue el patrón "Bump <dependency> from ..."
              const match = pr.title.match(/Bump\s+([\w\.\-\/]+)/);
              if (match) {
                dependencyName = match[1];
              }
              // Si se ha actualizado la dependencia (es decir, no está en la lista de fallos) se cierra la PR
              if (dependencyName && !failedDeps.includes(dependencyName)) {
                core.info(`Closing PR #${pr.number} for dependency ${dependencyName} (applied update).`);
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  state: "closed"
                });
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${pr.head.ref}`
                  });
                } catch (error) {
                  core.warning(`Could not delete branch ${pr.head.ref}: ${error.message}`);
                }
              } else {
                core.info(`Leaving PR #${pr.number} open for dependency ${dependencyName} (update not applied).`);
              }
            }
