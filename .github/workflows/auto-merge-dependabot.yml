name: Combine and Auto-Merge Dependabot PRs

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 6'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependabot-prs:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.check_prs.outputs.result }}
    steps:
      - name: Check if Dependabot PRs exist
        id: check_prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            const dependabotPRs = prs.filter(pr =>
              pr.user.login === "dependabot[bot]" || pr.head.ref.startsWith("dependabot/")
            );
            core.info(`Found ${dependabotPRs.length} Dependabot PR(s).`);
            return dependabotPRs.length > 0 ? "true" : "false";
          result-encoding: string

  combine-dependabot-prs:
    needs: check-dependabot-prs
    if: needs.check-dependabot-prs.outputs.found == 'true'
    runs-on: ubuntu-latest
    concurrency:
      group: "dependabot-combine-${{ github.ref }}"
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clean combined branch if exists
        run: |
          git fetch origin dependabot-combined-prs || true
          git push origin --delete dependabot-combined-prs || true

      - name: Combine Dependabot PRs
        continue-on-error: true
        uses: mAAdhaTTah/combine-dependabot-prs@main
        with:
          branchPrefix: dependabot
          mustBeGreen: true
          combineBranchName: dependabot-combined-prs
          baseBranch: master
          openPR: true
          allowSkipped: true
          ignoreLabel: nocombine
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Combined PR number
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: `${context.repo.owner}:dependabot-combined-prs`
            });
            if (prs.length === 0) {
              core.info("No combined PR found.");
              return;
            }
            core.setOutput("pr_number", prs[0].number);
          result-encoding: string

  automerge-dependabot-prs:
    needs: combine-dependabot-prs
    if: needs.combine-dependabot-prs.outputs.pr_number != ''
    runs-on: ubuntu-latest

    steps:
      - name: Auto-approve with Bot Token
        if: ${{ needs.combine-dependabot-prs.outputs.pr_number != '' }}
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.BOT_PAT }}
          pull-request-number: ${{ needs.combine-dependabot-prs.outputs.pr_number }}

      - name: Merge Combined PR (solo si autor es github-actions o dependabot)
        if: ${{ needs.combine-dependabot-prs.outputs.pr_number != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const prNumber = parseInt('${{ needs.combine-dependabot-prs.outputs.pr_number }}');

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const author = pr.user.login;
            core.info(`El autor del PR #${prNumber} es ${author}`);

            if (author === 'github-actions[bot]' || author === 'dependabot[bot]') {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
              });
              core.info(`✅ PR #${prNumber} fusionado correctamente.`);
            } else {
              core.info(`⏭ PR #${prNumber} no fusionado (autor: ${author})`);
            }

      - name: Delete combined branch if merged
        if: ${{ needs.combine-dependabot-prs.outputs.pr_number != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = Number('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            if (pr.merged) {
              core.info("PR has been merged. Deleting combined branch...");
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/dependabot-combined-prs'
              });
            } else {
              core.info("PR not merged. Keeping combined branch.");
            }

      - name: Close original Dependabot PRs and delete branches
        if: ${{ steps.get_pr_info.outputs.pr_number != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const basePr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: Number('${{ steps.get_pr_info.outputs.pr_number }}')
            });

            const { data: allPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            const originalPRs = allPRs.filter(pr =>
              pr.user.login === "dependabot[bot]" &&
              pr.head.ref !== "dependabot-combined-prs"
            );

            for (const pr of originalPRs) {
              core.info(`Closing PR #${pr.number} and deleting branch ${pr.head.ref}`);
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: "closed"
              });

              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${pr.head.ref}`
                });
              } catch (error) {
                core.warning(`Could not delete branch ${pr.head.ref}: ${error.message}`);
              }
            }