name: Combine and Auto-Merge Dependabot PRs

on:
  schedule:
    - cron: '0 15 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check-dependabot-prs:
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.check_prs.outputs.result }}
    steps:
      - name: Check if Dependabot PRs exist
        id: check_prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            const dependabotPRs = prs.filter(pr =>
              pr.user.login === "dependabot[bot]" || pr.head.ref.startsWith("dependabot/")
            );
            core.info(`Found ${dependabotPRs.length} Dependabot PR(s).`);
            return dependabotPRs.length > 0 ? "true" : "false";
          result-encoding: string

  get-prs-without-conflicts:
    needs: check-dependabot-prs
    if: needs.check-dependabot-prs.outputs.found == 'true'
    runs-on: ubuntu-latest
    outputs:
      conflicts: ${{ steps.set_output.outputs.has_conflicts }}
    steps:
      - name: Check for open Dependabot PRs without conflicts
        id: set_output
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            const dependabotPRs = prs.filter(pr =>
              pr.user.login === "dependabot[bot]" || pr.head.ref.startsWith("dependabot/")
            );

            const prsWithoutConflicts = [];

            for (const pr of dependabotPRs) {
              const { data: mergeableInfo } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });

              if (mergeableInfo.mergeable === true) {
                prsWithoutConflicts.push(pr.number);
              }
            }

            const hasConflicts = prsWithoutConflicts.length > 0 ? "true" : "false";
            core.setOutput("has_conflicts", hasConflicts);
          result-encoding: string

  delete-combined-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Delete 'dependabot-combined-prs' branch if it exists
        run: |
          if git ls-remote --exit-code --heads origin dependabot-combined-prs; then
            git push origin --delete dependabot-combined-prs
            echo "Deleted 'dependabot-combined-prs' branch."
          else
            echo "'dependabot-combined-prs' branch does not exist."
          fi

  combine-dependabot-prs:
    needs: [get-prs-without-conflicts, delete-combined-branch]
    if: needs.get-prs-without-conflicts.outputs.conflicts == 'true'
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr_info.outputs.pr_number }}
    concurrency:
      group: "dependabot-combine-${{ github.ref }}"
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Combine Dependabot PRs
        continue-on-error: true
        uses: mAAdhaTTah/combine-dependabot-prs@main
        with:
          branchPrefix: dependabot
          mustBeGreen: true
          combineBranchName: dependabot-combined-prs
          baseBranch: debian/master
          openPR: true
          allowSkipped: true
          ignoreLabel: nocombine
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Combined PR number
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            await new Promise(resolve => setTimeout(resolve, 2000));
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: `${context.repo.owner}:dependabot-combined-prs`
            });
            if (prs.length === 0) {
              core.info("No combined PR found.");
              return;
            }
            core.setOutput("pr_number", prs[0].number);
          result-encoding: string

  automerge-dependabot-prs:
    needs: combine-dependabot-prs
    if: needs.combine-dependabot-prs.outputs.pr_number != ''
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve with Bot Token
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.BOT_PAT }}
          pull-request-number: ${{ needs.combine-dependabot-prs.outputs.pr_number }}

      - name: Merge Combined PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const prNumber = parseInt('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            if (pr.user.login === 'github-actions[bot]' || pr.user.login === 'dependabot[bot]') {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              core.info(`PR #${prNumber} merged successfully.`);
            } else {
              core.info(`PR #${prNumber} not merged automatically (author: ${pr.user.login})`);
            }

      - name: Delete combined branch if merged
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = Number('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            if (pr.merged) {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/dependabot-combined-prs'
              });
              core.info(":: Deleted dependabot-combined-prs after merge.");
            } else {
              core.info("PR not merged. Keeping branch for review.");
            }

  extract-pr-info:
    if: needs.combine-dependabot-prs.outputs.pr_number != ''
    name: Extract PR Information
    needs: automerge-dependabot-prs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Delete Combined Branch (Final Cleanup)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = 'heads/dependabot-combined-prs';
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref
              });
              core.info("Deleted 'dependabot-combined-prs' branch.");
            } catch (error) {
              core.info("Branch 'dependabot-combined-prs' does not exist or failed to delete: " + error.message);
            }

      - name: Extract Combined PR Details
        id: get_pr_details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
            if (!prNumber) {
              core.info("No combined PR number available.");
              return;
            }
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            core.info(`PR Title: ${pr.title}`);
            core.info(`PR Body: ${pr.body}`);
            core.info(`Merged at: ${pr.merged_at}`);
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const commitShas = commits.map(c => c.sha);
            core.info(`Commits: ${commitShas.join(", ")}`);
            const summary = {
              pr_number: pr.number,
              title: pr.title,
              body: pr.body,
              merged_at: pr.merged_at,
              commits: commitShas
            };
            core.setOutput('summary', JSON.stringify(summary));
          result-encoding: string

      - name: Save PR Summary as Artifact
        run: |
          echo "${{ steps.get_pr_details.outputs.summary }}" > pr-summary.json
        shell: bash

      - name: Upload PR Summary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-summary
          path: pr-summary.json

  send-email:
    name: Send Email with PR Summary
    needs: extract-pr-info
    runs-on: ubuntu-latest
    steps:
      - name: Download PR Summary Artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-summary

      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Resumen de la fusi√≥n de PRs de Dependabot"
          body: |
            Se ha fusionado la siguiente PR combinada:
            ${{ steps.get_pr_details.outputs.summary }}
          to: adria7904@gmail.com
          from: adria7904@gmail.com

  finalize-check:
    needs: send-email
    name: Final Cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Delete Combined Branch (Final Cleanup)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = 'heads/dependabot-combined-prs';
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref
              });
              core.info("Deleted 'dependabot-combined-prs' branch in finalize-check.");
            } catch (error) {
              core.info("Branch 'dependabot-combined-prs' does not exist or failed to delete: " + error.message);
            }

      # Uncomment the following block if you want to close and delete the original PRs after merging
#      
#      - name: Close and delete combined branch if merged
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const prNumber = Number('${{ needs.combine-dependabot-prs.outputs.pr_number }}');
#            const { data: pr } = await github.rest.pulls.get({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: prNumber
#            });
#
#            const body = pr.body;
#            const prNumbers = [...body.matchAll(/#(\d+)/g)].map(match => Number(match[1]));
#
#            for (const number of prNumbers) {
#              try {
#                // Cerrar la PR original
#                await github.rest.pulls.update({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  pull_number: number,
#                  state: 'closed'
#                });
#                core.info(`PR #${number} cerrada.`);
#
#                // Obtener informaci√≥n de la PR para eliminar la rama
#                const { data: originalPr } = await github.rest.pulls.get({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  pull_number: number
#                });
#
#                const branchRef = `heads/${originalPr.head.ref}`;
#                await github.rest.git.deleteRef({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  ref: branchRef
#                });
#                core.info(`Rama ${branchRef} eliminada.`);
#              } catch (error) {
#                core.warning(`No se pudo cerrar o eliminar la PR #${number}: ${error.message}`);
#              }
#            }
#
